http://www.2cto.com/database/201201/116110.html
http://blog.csdn.net/wangpeng047/article/details/7705588
http://wenku.baidu.com/view/f1d84d0d4431b90d6c85c7da.html


$gt  > 大于
$lt  < 小于
$gte >= 大于等于 
$lte <= 小于等于
db.mycol.insert({title:'Neo4j Overview', description: 'Neo4j is no sql database',by_user: 'Neo4j',url: 'http://www.w3cschool.cc',tags: ['mongodb','database', 'NoSQL'],likes: 750})
--------------------------------------------------------------------------------------------
	1.查看当前数据库
		db
	2.查看有多少数据库
		show dbs  -------sql - show databases
	3.切换数据库
		use dbName （也是创建）
	4.删除当前使用数据库 
		db.dropDatabases()
	5.创建表
		db.createCollection("zhao") ------------------------------------sql create table tableName（）
		db.createCollection("zhao",{capped:true,size:10000})
		//capped:true 表示表结构不能被修改，size表示大小，插入数据时会按找表结构来插入数据，超出部分会覆盖前面已经插好的数据
		
		sql ---------------------
				 create table zhao(
					    -> id int(11) auto_increment primary key,
					    -> name varchar(255) not null,
					    -> sex tinyint(1) not null default "0",
					    -> age tinyint(3) not null
					    -> )engine=InnoDb default charset=utf8
	6.修改数据库表明
		db.oldName.renameCollection("newName");  --------------sql rename table oldName to newName;

					

	5.插入记录
		db.tableName.insert({a:1,b:1});  
		db.tableName.insert({name:'chendoudou',sex:"man",age:23});        -----------------sql  insert into tableName(字段1,字段2)value("V1","V2");
	6.查看全部记录
		db.tableName.find()                   -----------sql  selec * from tableName
	7.仅查询一条记录
		db.tableName.findOne()		      -------------sql select * from tableName limit 1;
	8.查询不同值 distinct 返回的是一个数组
		db.tableName.distinct('字段');
	9.模糊匹配  
		1.db.tableName.find({name:/zhao/})	----sql select * from tableName where name like "%zhao%"; //查询表中包含关键子zhao的列
 		2.查询以什么开头的记录
		  db.tableName.find({name:/^zhao/})     ---sql  select * from tableName where name like "zhao%"; //查询以zhao开头的列
		3.查询以什么结尾的字段
		  db.tableName.find({name:/zhao$/})     ----sql select * from tableName where name like "%zhao"; //查询以zhao结尾的列
	10.查询指定的字段(只看 name sex age 等等);
	   	db.newtest.find({},{name:1,age:1});  //只看 name age 
						----sql select name,age,sex from newtest; 
	11.查询排除指定的列
		db.newtest.find({},{name:0}); //排除指定的列 除了name 其他都显示
	
		
	12.字段排序
		db.newtest.find().sort({age:1}) //查看全部字段 年龄age 为1 安照 升序排列 -1 降序排列
						----sql select * frome newtest order by age desc//desc 降序 asc 升序
	13.统计记录条数
		db.newtest.find().count()   // 查询 newtest 的总记录数
						-----sql  select count(*) from newtest 
	   统计满足条件的记录数
		db.newtest.find({name:"zhao"}).count(); //统计 name=zhao条件的总记录数
						-----sql  select count(1) as nameNum from newtest where name="zhao";
	   统计年龄大于20 的记录数
		db.newtest.find({age:{"$gt":20}}).count //注意 20 是什么数据类型 是整形 还是字符串，字符串加 "";
						-------sql select count(1) as gtAge from newtest where age >20;
	   统计字段中符合条件的记录数
		db.newtest.find({age:{"$exists":"ture"}}) //age字段存在的条数
 	14  查询10条以后的记录 limit skip
		db.newtest.find().skip(10); //从第10条以后开始查
	    查询 第10条以后的数据 查 5条
		db.newtest.find().skip(10).limit(5)// 从10条后开始拿5条		
	15. or 查询
		db.newtest.find({"$or":[{name:"z1"},{name:"c1"}]}); --sql select * from newtest where name="z" OR name="c";
	16. and 查询
		db.newtest.find({"$and:[{name:"z1"},{sex:"man"}]"}); ----sql select * from newtest where name="z1" AND sex="man"
	17.修改记录
		db.newtest.update({name:"c1"},{"$set",{age:122,sex:"gril"}});//将name等于c1的记录年龄修改为122 性别修改为 gril。
			----sql update  newtest set name="chen2222" where id>1 && id<5; 将 id>1 和 id<5 的记录 的name 改成 chen22222
	18.删除记录 remove
		
		db.newtest.remove({age:"1000"}); ---delete from newtest where age=“1000”; 将标newtest 中年龄为1000的记录删除
		db.newtest.remove({"age":{"$lt":20}}); delete from newtest where age <20   newtest 标中 年龄小于20 的删除
	19.全部删除
		db.newtest.remove();
		db.newtest.remove({});

-----------------------------综合联合查询操作------------------------------------
		db.newtest.find({name:"zhao"}); //查询name 等于zhao 的 记录 ----sql select * from newtest where name="zhao";	        
		db.newtest.find({age:"22"}).count(); //查询年龄为22 的总记录数。
		db.newtest.find({age:"22"}).limit(2)//年龄为22 的取 2条
		db.newtest.find(age:"22").skip(2)//年龄为22的从2条后开始取，前面的忽略不取。
		db.newtest.find().skip(2).limit(3);//分页，从2条开始取 取3条		
		db.newtes.save({name:"liuyin",age:"21":sex:"gril"}); 插入一条数据
		for循环
		for(var i=1;i<=20;i++){var num = i%6;db.test.insert({_id:i,name:"chen_"+i,age:num});}
	
	一. mongodb group by 的使用
		key：是用来分组的字段，和keyf一样两者必须要有一个
		keyf：可以接受一个javascript函数，用来动态的确定分组文档的字段。和key必须要有一个
		initial：初始化统计变量
		$reduce 函数执行统计的操作
		function 

		1.db.newtest.group({key:{sex:true},initial:{num:0},$reduce:function(doc,prev){prev.num++}});

		   数组： [ { "sex" : "man", "num" : 4 }, { "sex" : "gril", "num" : 9 } ] //得到分组字段总数和类别 
		   //将年龄分组 （gril 9个，man：4个） prev调用group内的方法 doc是返回的一个结果集; 可以自己定义
		   db.表名.group({key:{sex:true},initial:{num:0},$reduce:function(doc,prev){prev.num++}});			
	
		2.db.runCommand({group:{ns:"newtest",key:{sex:true},initial:{num:0},$reduce:function(doc,prev){prev.num++}}});
		   json	
			   {
		"retval" : [
			{
				"sex" : "man",
				"num" : 4
			},
			{
				"sex" : "gril",
				"num" : 9
			},
			{
				"sex" : "gad",
				"num" : 2
			}
		],
		"count" : 15,
		"keys" : 3,
		"ok" : 1
	}
		  //runCommand({group:{ns:"表名",key{分组字段:true},initial:{num:0“(/初始化变量/)”},$reduce:function(doc,prev){prev.num++}}});
		  的到分组具体详情 总记录数count 分类个数keys 分类个类型总数
		
                3.条件筛选condition
		 db.test.group({key:{age:true},initial:{num:0},$reduce:function(doc,prev){prev.num++},condition:{age:{$gt:2}}});		
		4.普通的$where 条件查询
		 db.newtest.find($where:function(){
		
			return this.age>20;			
		});
		//查询年龄大于20的
		5.在分组中使用where条件
		 db.test.group({key:{age:true},initial:{num:0},$reduce:function(doc,prev){prev.num++},condition:{$where:function(){return this.age>3}}});
		
	
	

		
