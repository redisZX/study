-----------------------------创建版本库-------------------------------------------------
	redis.imagchina.com
这个域名指向到你的机器，但只在外网访问时好用，内网直接用192.168.0.195访问 

cretetime 精确到毫秒
/etc/apache2/sites-available# vim 000-default.conf  虚拟主机目录

1.
	
	初始化一个Git仓库，使用git init命令。
	添加文件到Git仓库，分两步：
	    第一步，使用命令git add ，注意，可反复多次使用，添加多个文件；
	    第二步，使用命令git commit，完成。
	 git config --global user.email "453493049@qq.com";增加邮箱
	 git config --global user.redis "赵鑫"
------------------------------仓库状态-------------------------------------------------
2.git status命令可以让我们时刻掌握仓库当前的状态
	git status告诉你有文件被修改过，用git diff可以查看修改内容。
------------------------------版本回退-------------------------------------------------
3.git log 查看历史记录,git log命令显示从最近到最远的提交日志
	  git reset --hard HEAD^  ，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	  git reset --hard 3628164 回退到指定版本
	  git reflog用来记录你的每一次命令：
	  现在总结一下：
	    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
-------------------------------管理修改-----------------------------------------------------------
	1.第一次修改 -> git add -> 第二次修改 -> git commit
	你看，我们前面讲了，Git管理的是修改，当你用“git add”命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，“git commit”只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。修改成功是暂存区的
	2.git diff HEAD -- readme.txt”命令可以查看工作区和版本库里面最新版本的区别：
-----------------------------------撤销修改----------------------------------------------------------------
	1. checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，回到最近一次add commit 修改。 撤销工作区
	2. git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：撤销暂存区的修改，重新回到工作区
	小结
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，git checkout file 就好了
	 
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节， git reset 不过前提是没有推送到远程库 
------------------------------------删除文件-------------------------------------------------------------------------
         1. git rm test.txt 删除文件 然后 git commit 文件就彻底删除了
	 2.删除错了但是文件还在版本库里  git checkout  --文件名  就可以恢复了
------------------------------------远程仓库-------------------------------------------------------------------------------------
	 1.注册gitHub 
	   《》.创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件
		cat id_rsa.pub 获得公钥 链接远程仓库的标识
------------------------------------添加远程仓库---------------------------------------------------------------------------------
	1  git clone git@github.com:redisZX/gitdemo.git //首先进入根目录 ，redisZX 用户名 gitdemo 仓库
	  git remote add origin git@github.com:michaelliao/learngit.git@
	2.把已有的本地仓库推送上去
	  git remote add origin git@github.com:michaelliao/learngit.git	
	3.总结
	4.每次推送之前更新git pull origin master
	git push -u  origin master
	要关联一个远程库，使用命令git remote add origin（别名） git@github.com:michaelliao/learngit.git

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；（推送）

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

	分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
------------------------------------从远程克隆----------------------------------------------------------------------------------
git clone git@github.com:redisZX(用户名)/gitdemo（仓库）.git  本地
git clone https://github/chenpeng78/text	远程


---------创建合并分支-----------
1 git checkout -b name 命令加上-b参数表示(创建并切换)，相当于这两条命令 git branch dev git checkout dev
2 git branch 查看当前分支  git checkout 切换分支
3.我们在当前分支修改操作 是当前分支的事，跟其他分支没事，切换回去没发生什么改变。
4.git merge dev 合并分支 内容就一样了
5.查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某分支到当前分支：git merge name
删除分支：git branch -d name
-------合并分支---------------
两个分支都有修改统一个文件。最后确定修改那一条 在在分支 修改提交。
git log --graph --pretty=oneline --abbrev-commit 查看合并情况

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

--------分支管理策略------------------------------------------------------------
	git merge --no-ff -m "merge with no-ff" dev
合并分支时，如果可能，Git会用“Fast forward”模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用“Fast forward”模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
下面我们实战一下--no-ff方式的merge
	git log --graph --pretty=oneline --abbrev-commit 查看分支历史

--------bug分支-------------------------
	创建一个临时分支来修护bug,修护后合并分支然后将临时分支删除就行了
	git stash 当前工作现场“储藏”起来，等以后恢复现场后继续工作：






-------修护bug分支------------------------------------------------
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
-------搭建git服务器-----------------------------------------------------------
1.第一步安装git
	sudo apt-get install git
  第二步创建git 用户，用来运行git服务
	sudo adduser git
  第三步创建证书登录
	收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
  第四步 初始化git仓库
	《1.选定一个目录作为仓库 /var/www/testGit(项目目录)
	  git init --bare testGit.git（空仓库没有）没有.git隐藏文件,也就是没有工作区纯粹是为了共享，不让用户登录区更改
  	 并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：(没有则改)
  第五步：
	出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
	git:x:1001:1001:,,,:/home/git:/bin/bash
	修改为
	git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
        git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
  第六步:克隆远程仓库
	git clone git@server:/srv/sample.git
 	
 -------------------忽视特苏文件-------------------------------------------

    忽略操作系统自动生成的文件，比如缩略图等；
    忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
    忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	
    忽略某些文件时，需要编写.gitignore。
    .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！



	 

















 	
